openapi: 3.0.0
info:
  title: LoopBack Application
  version: 1.0.0
paths:
  /customers/count:
    get:
      x-controller-name: CustomerController
      x-operation-name: count
      tags:
        - CustomerController
      responses:
        '200':
          description: Customer model count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
  '/customers/{id}':
    put:
      x-controller-name: CustomerController
      x-operation-name: replaceById
      tags:
        - CustomerController
      responses:
        '204':
          description: Customer PUT success
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        x-parameter-index: 1
    patch:
      x-controller-name: CustomerController
      x-operation-name: updateById
      tags:
        - CustomerController
      responses:
        '204':
          description: Customer PATCH success
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        x-parameter-index: 1
    get:
      x-controller-name: CustomerController
      x-operation-name: findById
      tags:
        - CustomerController
      responses:
        '200':
          description: Customer model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
    delete:
      x-controller-name: CustomerController
      x-operation-name: deleteById
      tags:
        - CustomerController
      responses:
        '204':
          description: Customer DELETE success
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
  /customers:
    post:
      x-controller-name: CustomerController
      x-operation-name: create
      tags:
        - CustomerController
      responses:
        '200':
          description: Customer model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
    patch:
      x-controller-name: CustomerController
      x-operation-name: updateAll
      tags:
        - CustomerController
      responses:
        '200':
          description: Customer PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
    get:
      x-controller-name: CustomerController
      x-operation-name: find
      tags:
        - CustomerController
      responses:
        '200':
          description: Array of Customer model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
      parameters:
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            properties:
              where:
                type: object
              fields:
                type: object
                properties:
                  id:
                    type: boolean
                  name:
                    type: boolean
                  contact:
                    type: boolean
              offset:
                type: integer
                minimum: 0
              limit:
                type: integer
                minimum: 0
              skip:
                type: integer
                minimum: 0
              order:
                type: array
                items:
                  type: string
            type: object
  /orders/count:
    get:
      x-controller-name: OrderController
      x-operation-name: count
      tags:
        - OrderController
      responses:
        '200':
          description: Order model count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
  '/orders/{id}':
    put:
      x-controller-name: OrderController
      x-operation-name: replaceById
      tags:
        - OrderController
      responses:
        '204':
          description: Order PUT success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        x-parameter-index: 1
    patch:
      x-controller-name: OrderController
      x-operation-name: updateById
      tags:
        - OrderController
      responses:
        '204':
          description: Order PATCH success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        x-parameter-index: 1
    get:
      x-controller-name: OrderController
      x-operation-name: findById
      tags:
        - OrderController
      responses:
        '200':
          description: Order model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
    delete:
      x-controller-name: OrderController
      x-operation-name: deleteById
      tags:
        - OrderController
      responses:
        '204':
          description: Order DELETE success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
  /orders:
    post:
      x-controller-name: OrderController
      x-operation-name: create
      tags:
        - OrderController
      responses:
        '200':
          description: Order model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
    patch:
      x-controller-name: OrderController
      x-operation-name: updateAll
      tags:
        - OrderController
      responses:
        '200':
          description: Order PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
    get:
      x-controller-name: OrderController
      x-operation-name: find
      tags:
        - OrderController
      responses:
        '200':
          description: Array of Order model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
      parameters:
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            properties:
              where:
                type: object
              fields:
                type: object
                properties:
                  id:
                    type: boolean
                  customer:
                    type: boolean
                  toppings:
                    type: boolean
                  status:
                    type: boolean
              offset:
                type: integer
                minimum: 0
              limit:
                type: integer
                minimum: 0
              skip:
                type: integer
                minimum: 0
              order:
                type: array
                items:
                  type: string
            type: object
  /ping:
    get:
      x-controller-name: PingController
      x-operation-name: ping
      tags:
        - PingController
      responses:
        '200':
          description: Ping Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  greeting:
                    type: string
                  date:
                    type: string
                  url:
                    type: string
                  headers:
                    type: object
                    properties:
                      Content-Type:
                        type: string
                    additionalProperties: true
servers:
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/jiangrenmel/pizzaCreator/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/jiangrenmel/PizzaCreator/1.0.0
  - url: 'https://cheng-lb4-order-api.herokuapp.com'
components:
  schemas:
    Customer:
      title: Customer
      properties:
        id:
          type: string
        name:
          type: string
        contact:
          type: string
      required:
        - name
    Topping:
      title: Topping
      properties:
        id:
          type: string
        name:
          type: string
        price:
          type: number
        quantity:
          type: number
      required:
        - name
    Order:
      title: Order
      properties:
        id:
          type: string
        customer:
          type: object
        toppings:
          type: array
          items:
            $ref: '#/components/schemas/Topping'
        status:
          type: string
      required:
        - customer
        - toppings
